buildscript {
  ext {
    corda_release_group = 'net.corda'
    corda_release_version = '4.0'
    corda_gradle_plugins_version = '4.0.38'
    kotlin_version = '1.2.71'
    junit_version = '4.12'
    quasar_version = '0.7.9'
  }

  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
    maven { url 'https://jitpack.io' }
  }

  dependencies {
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
    classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
    classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
  maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda' }
  maven { url 'https://jitpack.io' }
}

apply plugin: 'kotlin'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

dependencies {
  cordapp project(":workflows")
  cordapp project(":workflows-extended-validation")
  cordapp project(":contracts")
}

allprojects {
  apply plugin: 'kotlin'
  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" <<
        "-Xlint:-options" << "-parameters"
    options.encoding = 'UTF-8'
  }

  tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
      languageVersion = "1.2"
      apiVersion = "1.2"
      jvmTarget = "1.8"
      javaParameters = true // Useful for reflection.
      freeCompilerArgs = ['-Xjvm-default=compatibility']
      allWarningsAsErrors = project.hasProperty('compilation.allWarningsAsErrors') ?
          project.property('compilation.allWarningsAsErrors').toBoolean() : false
    }
  }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
  directory "./build/nodes"
  node {
    name "O=Notary,L=London,C=GB"
    notary = [validating: false]
    p2pPort 10001
    rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    rpcSettings {
      address("localhost:10005")
      adminAddress("localhost:10045")
    }
    cordapps = [
        "$project.group:contracts:$project.version",
        "$project.group:workflows:$project.version"
    ]
  }
  node {
    name "O=PartyA,L=London,C=GB"
    p2pPort 10002
    rpcSettings {
      address("localhost:10006")
      adminAddress("localhost:10046")
    }
    rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    cordapp(project(':contracts'))
    cordapp(project(':workflows'))
    cordapp(project(':workflows-extended-validation'))
    flowOverride("com.lankydanblog.tutorial.base.flows.SendMessageFlow",
        "com.lankydanblog.tutorial.validation.flows.ValidationSendMessageResponder")

  }
  node {
    name "O=PartyB,L=London,C=GB"
    p2pPort 10003
    rpcSettings {
      address("localhost:10009")
      adminAddress("localhost:10049")
    }
    rpcUsers = [[user: "user1", "password": "test", "permissions": ["ALL"]]]
    cordapp(project(':contracts'))
    cordapp(project(':workflows'))
  }
}

cordapp {
  info {
    targetPlatformVersion = "4"
  }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
  kotlinOptions {
    languageVersion = "1.2"
    apiVersion = "1.2"
    jvmTarget = "1.8"
    javaParameters = true // Useful for reflection.
  }
}